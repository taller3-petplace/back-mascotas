// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/app/services/pet_place.go
//
// Generated by this command:
//
//	mockgen -source cmd/app/services/pet_place.go -destination cmd/app/services/pet_place_mock.go
//
// Package mock_services is a generated GoMock package.
package services

import (
	data "petplace/back-mascotas/cmd/app/data"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPetService is a mock of PetService interface.
type MockPetService struct {
	ctrl     *gomock.Controller
	recorder *MockPetServiceMockRecorder
}

func (m *MockPetService) EditPet(pet data.Pet) (data.Pet, error) {
	//TODO implement me
	panic("implement me")
}

func (m *MockPetService) DeletePet(petID int) {
	//TODO implement me
	panic("implement me")
}

// MockPetServiceMockRecorder is the mock recorder for MockPetService.
type MockPetServiceMockRecorder struct {
	mock *MockPetService
}

// NewMockPetService creates a new mock instance.
func NewMockPetService(ctrl *gomock.Controller) *MockPetService {
	mock := &MockPetService{ctrl: ctrl}
	mock.recorder = &MockPetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetService) EXPECT() *MockPetServiceMockRecorder {
	return m.recorder
}

// GetPet mocks base method.
func (m *MockPetService) GetPet(pet int) (data.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPet", pet)
	ret0, _ := ret[0].(data.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPet indicates an expected call of GetPet.
func (mr *MockPetServiceMockRecorder) GetPet(pet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPet", reflect.TypeOf((*MockPetService)(nil).GetPet), pet)
}

// GetPetsByOwner mocks base method.
func (m *MockPetService) GetPetsByOwner(request data.SearchRequest) (data.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetsByOwner", request)
	ret0, _ := ret[0].(data.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetsByOwner indicates an expected call of GetPetsByOwner.
func (mr *MockPetServiceMockRecorder) GetPetsByOwner(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetsByOwner", reflect.TypeOf((*MockPetService)(nil).GetPetsByOwner), request)
}

// RegisterNewPet mocks base method.
func (m *MockPetService) RegisterNewPet(pet data.Pet) (data.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNewPet", pet)
	ret0, _ := ret[0].(data.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterNewPet indicates an expected call of RegisterNewPet.
func (mr *MockPetServiceMockRecorder) RegisterNewPet(pet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNewPet", reflect.TypeOf((*MockPetService)(nil).RegisterNewPet), pet)
}
